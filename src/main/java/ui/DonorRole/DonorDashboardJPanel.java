/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.DonorRole;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.Color;
import java.io.FileWriter;
import java.io.IOException;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.FundRequest;
import java.awt.CardLayout;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.print.*;
import java.io.File;
import javax.imageio.ImageIO;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;


/**
 *
 * @author keerthiareddy
 */
public class DonorDashboardJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem business;


    /**
     * Creates new form DonorDashboardJPanel
     */
    public DonorDashboardJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.business = business;

        populateDashboard();
         populatePieChart();
    }

  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        donorNameLabel = new javax.swing.JLabel();
        viewFundRequestbtn = new javax.swing.JButton();
        downloadImpactBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        donorNameLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        donorNameLabel.setText("Donor Dashboard");

        viewFundRequestbtn.setText("View Fund Requests");
        viewFundRequestbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFundRequestbtnActionPerformed(evt);
            }
        });

        downloadImpactBtn.setText("Download Impact Report");
        downloadImpactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadImpactBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Donor Impact Pie Chart:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(donorNameLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(viewFundRequestbtn)
                        .addGap(18, 18, 18)
                        .addComponent(downloadImpactBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(donorNameLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewFundRequestbtn)
                    .addComponent(downloadImpactBtn))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewFundRequestbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewFundRequestbtnActionPerformed
    FundRequestsScreenJPanel panel = new FundRequestsScreenJPanel(userProcessContainer, business, account);
    userProcessContainer.add("FundRequestsScreenJPanel", panel);
    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
    layout.next(userProcessContainer);// TODO add your handling code here:
    }//GEN-LAST:event_viewFundRequestbtnActionPerformed

    private void downloadImpactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadImpactBtnActionPerformed
        try {
        // Generate the printable file
        String filePath = System.getProperty("user.home") + File.separator + "DonorImpactReport.txt";
        generateImpactReport(filePath);

        JOptionPane.showMessageDialog(this, "Impact Report saved successfully at: " + filePath, "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to save Impact Report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_downloadImpactBtnActionPerformed
  private void generateImpactReport(String filePath) throws IOException {
    // Prepare the text report file
    File file = new File(filePath);
    try (FileWriter writer = new FileWriter(file)) {
        // Write the header
        writer.write("Donor Impact Report\n");
        writer.write("Generated on: " + java.time.LocalDateTime.now() + "\n");
        writer.write("===========================================\n\n");

        // Write the pie chart data
        writer.write("Donor Impact Pie Chart Data:\n");
        Map<String, Double> statusContribution = getPieChartData();
        for (Map.Entry<String, Double> entry : statusContribution.entrySet()) {
            writer.write(entry.getKey() + ": $" + entry.getValue() + "\n");
        }

        writer.write("\n");

        // Write the fund request table
        writer.write("Fund Requests:\n");
        writer.write(String.format("%-15s %-15s %-15s %-15s %-15s %-15s\n",
                "Request ID", "Request Type", "Beneficiary Name", "Amount Needed", "Amount Funded", "Status"));

        List<WorkRequest> workRequests = business.getWorkQueue().getWorkRequestList();
        for (WorkRequest request : workRequests) {
            if (request instanceof FundRequest) {
                FundRequest fundRequest = (FundRequest) request;
                writer.write(String.format("%-15d %-15s %-15s %-15.2f %-15.2f %-15s\n",
                        fundRequest.getId(),
                        fundRequest.getType(),
                        fundRequest.getRequester().getEmployee().getName(),
                        fundRequest.getPrice(),
                        fundRequest.getAmountFunded(),
                        fundRequest.getStatus()));
            }
        }

        writer.write("\nReport generated successfully.\n");
    }
}
private Map<String, Double> getPieChartData() {
    Map<String, Double> statusContribution = new HashMap<>();
    List<WorkRequest> workRequests = business.getWorkQueue().getWorkRequestList();

    for (WorkRequest request : workRequests) {
        if (request instanceof FundRequest) {
            FundRequest fundRequest = (FundRequest) request;
            String status = fundRequest.getStatus();
            double amountFunded = fundRequest.getAmountFunded();
            statusContribution.put(status, statusContribution.getOrDefault(status, 0.0) + amountFunded);
        }
    }

    if (statusContribution.isEmpty()) {
        statusContribution.put("No Data Available", 1.0); // Add placeholder data
    }

    return statusContribution;
}

public void populateDashboard() {
        donorNameLabel.setText("Welcome, " + account.getEmployee().getName());
        populatePieChart();
    }

   private void populatePieChart() {
    List<WorkRequest> workRequests = business.getWorkQueue().getWorkRequestList();
    Map<String, Double> statusContribution = new HashMap<>();

    // Group contributions by status
    for (WorkRequest request : workRequests) {
        if (request instanceof FundRequest) {
            FundRequest fundRequest = (FundRequest) request;
            String status = fundRequest.getStatus();
            double amountFunded = fundRequest.getAmountFunded();
            statusContribution.put(status, statusContribution.getOrDefault(status, 0.0) + amountFunded);
        }
    }

    // Debug: Print data being passed
    System.out.println("Pie Chart Data: " + statusContribution);

    if (statusContribution.isEmpty()) {
        statusContribution.put("No Data Available", 1.0); // Placeholder if no data
    }

    // Convert map to arrays for PieChartPanel
    int[] values = statusContribution.values().stream().mapToInt(Double::intValue).toArray();
    String[] categories = statusContribution.keySet().toArray(new String[0]);
    Color[] colors = generateColorArray(categories.length);

    // Create PieChartPanel
    PieChartPanel pieChartPanel = new PieChartPanel(values, categories, colors);

    // Add to jPanel1 and refresh
    jPanel1.removeAll();
    jPanel1.setLayout(new java.awt.BorderLayout());
    jPanel1.add(pieChartPanel, java.awt.BorderLayout.CENTER);
    jPanel1.revalidate();
    jPanel1.repaint();
}
private Color[] generateColorArray(int size) {
    // Base colors to cycle through
    Color[] baseColors = new Color[]{
        Color.RED, Color.GREEN, Color.BLUE, Color.ORANGE,
        Color.MAGENTA, Color.CYAN, Color.PINK, Color.YELLOW
    };

    // Create the color array dynamically based on the number of categories
    Color[] colors = new Color[size];
    for (int i = 0; i < size; i++) {
        colors[i] = baseColors[i % baseColors.length]; // Cycle through base colors
    }

    return colors;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel donorNameLabel;
    private javax.swing.JButton downloadImpactBtn;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton viewFundRequestbtn;
    // End of variables declaration//GEN-END:variables

    

}
