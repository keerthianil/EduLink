/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.StudentRole;

import Business.Workshops.Workshop;
import ui.NGORole.NGOWorkAreaJPanel;
import javax.swing.table.DefaultTableModel;
import Business.Workshops.WorkshopDirectory;
import javax.swing.*;
import java.awt.*;
import java.util.Date;

import Business.EcoSystem;
import Business.UserAccount.UserAccount;

/**
 *
 * @author harshithachennareddy
 */
public class ViewWorkshopsJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private WorkshopDirectory workshopDirectory;
    private UserAccount account;

    /**
     * Creates new form ViewWorkshopsJPanel
     */
    public ViewWorkshopsJPanel (JPanel userProcessContainer, EcoSystem ecosystem, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.workshopDirectory = ecosystem.getWorkshopDirectory();
        this.account = account;
        populateWorkshopTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workshopsJTable = new javax.swing.JTable();
        enrollToWorkshopBtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workshopsJTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(240, 230, 239));

        jLabel1.setFont(new java.awt.Font("Sathu", 1, 18)); // NOI18N
        jLabel1.setText("All Workshops");

        workshopsJTable.setBackground(new java.awt.Color(239, 200, 223));
        workshopsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Workshop Name", "Description", "Location", "Date", "Status", "Conducted By"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workshopsJTable);
        if (workshopsJTable.getColumnModel().getColumnCount() > 0) {
            workshopsJTable.getColumnModel().getColumn(0).setHeaderValue("Workshop Name");
            workshopsJTable.getColumnModel().getColumn(1).setHeaderValue("Description");
            workshopsJTable.getColumnModel().getColumn(2).setHeaderValue("Location");
            workshopsJTable.getColumnModel().getColumn(3).setHeaderValue("Date");
            workshopsJTable.getColumnModel().getColumn(4).setHeaderValue("Status");
            workshopsJTable.getColumnModel().getColumn(5).setHeaderValue("Conducted By");
        }

        enrollToWorkshopBtn.setText("Enroll to Workshop");
        enrollToWorkshopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollToWorkshopBtnActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Sathu", 1, 18)); // NOI18N
        jLabel2.setText("Enrolled Workshops ");

        workshopsJTable1.setBackground(new java.awt.Color(239, 200, 223));
        workshopsJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Workshop Name", "Description", "Location", "Date", "Status", "Conducted By"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workshopsJTable1);
        if (workshopsJTable1.getColumnModel().getColumnCount() > 0) {
            workshopsJTable1.getColumnModel().getColumn(0).setHeaderValue("Workshop Name");
            workshopsJTable1.getColumnModel().getColumn(1).setHeaderValue("Description");
            workshopsJTable1.getColumnModel().getColumn(2).setHeaderValue("Location");
            workshopsJTable1.getColumnModel().getColumn(3).setHeaderValue("Date");
            workshopsJTable1.getColumnModel().getColumn(4).setHeaderValue("Status");
            workshopsJTable1.getColumnModel().getColumn(5).setHeaderValue("Conducted By");
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 704, Short.MAX_VALUE)
                        .addComponent(enrollToWorkshopBtn)
                        .addGap(64, 64, 64))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enrollToWorkshopBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backJButton)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        // go back to StudentWorkAreaJPAnel

    StudentWorkAreaJPanel swajp = (StudentWorkAreaJPanel) component;
    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
    layout.previous(userProcessContainer);




 
    }//GEN-LAST:event_backJButtonActionPerformed
    

    private void enrollToWorkshopBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // i need to know which row is selected and I need to be able to enroll the logged in user to it 

        int selectedRow = workshopsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a workshop to Enroll", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Workshop workshop = (Workshop) workshopsJTable.getValueAt(selectedRow, 0);
        // check if they are already enrolled and them add them

        if (workshop.getAttendees().contains(account)) {
            JOptionPane.showMessageDialog(null, "You are already enrolled to this workshop", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        workshop.getAttendees().add(account);

        JOptionPane.showMessageDialog(null, "You have successfully enrolled to the workshop", "Success", JOptionPane.INFORMATION_MESSAGE);

        populateEnrolledWorkshopTable();

        // print all the workshops in the drectory ad show enrollments to each workshop

        for (Workshop w : workshopDirectory.getWorkshopList()) {
            System.out.println("Workshop: " + w.getName());
            for (UserAccount ua : w.getAttendees()) {
                System.out.println("Enrolled: " + ua.getUsername());
            }
        }





        



    }
    
    
    private void populateWorkshopTable() {

        // print workshop directory 
        System.out.println("Workshop Directory: " + workshopDirectory.getWorkshopList());
        
        DefaultTableModel model = (DefaultTableModel) workshopsJTable.getModel();
        model.setRowCount(0);

        // Filter workshops targeted at "Students"
        for (Workshop workshop : workshopDirectory.getWorkshopList()) {
            if ("Students".equalsIgnoreCase(workshop.getTargetAudience())) {
                Object[] row = new Object[6];
                row[0] = workshop;
                row[1] = workshop.getDescription();
                row[2] = workshop.getLocation();
                row[3] = workshop.getDate();
                row[4] = workshop.getStatus();
                row[5] = workshop.getConductedBy();
                model.addRow(row);
            }
        }
    }


    private void populateEnrolledWorkshopTable() {
        DefaultTableModel model = (DefaultTableModel) workshopsJTable1.getModel();
        model.setRowCount(0);
    
        for (Workshop workshop : workshopDirectory.getWorkshopList()) {
            if (workshop.getAttendees().contains(account)) {
                Object[] row = new Object[6];
                row[0] = workshop;
                row[1] = workshop.getDescription();
                row[2] = workshop.getLocation();
                row[3] = workshop.getDate();
                row[4] = workshop.getStatus();
                row[5] = workshop.getConductedBy();
                model.addRow(row);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton enrollToWorkshopBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable workshopsJTable;
    private javax.swing.JTable workshopsJTable1;
    // End of variables declaration//GEN-END:variables
}
