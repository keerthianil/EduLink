/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.AdvisorRole;

import Business.EcoSystem;
import Business.Role.TeacherRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentRequest;
import Business.WorkQueue.WorkRequest;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.Date;

/**
 *
 * @author keerthiareddy
 */
public class StudentRequestsJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount currentAdvisor;

    /**
     * Creates new form StudentRequestsJPanel
     */
    public StudentRequestsJPanel( JPanel userProcessContainer, EcoSystem system, UserAccount account) {
        initComponents();
        

        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.currentAdvisor = account;

        populateStudentRequestsTable();
        populateTeacherCombobox();
        
        
    }

    private void populateStudentRequestsTable() {
    DefaultTableModel model = (DefaultTableModel) studentRequestTbl.getModel();
    model.setRowCount(0);

    
    UserAccount currentAdvisor = system.getUserAccountDirectory().getUserAccountByUsername(this.currentAdvisor.getUsername());

    for (UserAccount student : system.getUserAccountDirectory().getUserAccountList()) {
        if (student.getAssignedAdvisor() != null && student.getAssignedAdvisor().equals(currentAdvisor)) {
            for (WorkRequest request : student.getWorkQueue().getWorkRequestList()) {
                if (request.getType().equals("Class Request")) {
                    Object[] row = new Object[5];
                    row[0] = request;
                    row[1] = student.getEmployee().getName();
                    row[2] = request.getType();
                    row[3] = request.getRequestDate();
                    row[4] = request.getStatus();
                    model.addRow(row);
                }
            }
        }
    }
}


    private void populateTeacherCombobox() {
        chooseTeacherCombobox.removeAllItems(); // Clear existing items
    
        for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {
            if (userAccount.getRole() instanceof TeacherRole) {
                chooseTeacherCombobox.addItem(userAccount); // Add UserAccount object
            }
        }
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentRequestTbl = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        ScheduleSessionBtn = new javax.swing.JButton();
        chooseTeacherCombobox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 234, 208));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        jLabel1.setText("Student Requests");

        studentRequestTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Student Name", "Request Type", "Date", "Status"
            }
        ));
        jScrollPane1.setViewportView(studentRequestTbl);

        jButton1.setText("<<< back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ScheduleSessionBtn.setText("Schedule Session");
        ScheduleSessionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleSessionBtnActionPerformed(evt);
            }
        });

        chooseTeacherCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Choose Teacher");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(207, 207, 207)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseTeacherCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(253, 253, 253)
                .addComponent(ScheduleSessionBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseTeacherCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(ScheduleSessionBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(57, 57, 57))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

//     private void ScheduleSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleSessionBtnActionPerformed
//         int selectedRow = studentRequestTbl.getSelectedRow();
//     if (selectedRow < 0) {
//         JOptionPane.showMessageDialog(this, "Please select a request to schedule a session.", "Warning", JOptionPane.WARNING_MESSAGE);
//         return;
//     }

//     WorkRequest selectedRequest = (WorkRequest) studentRequestTbl.getValueAt(selectedRow, 0);
//     UserAccount selectedTeacher = (UserAccount) chooseTeacherCombobox.getSelectedItem();

//     if (selectedTeacher == null) {
//         JOptionPane.showMessageDialog(this, "Please select a teacher.", "Warning", JOptionPane.WARNING_MESSAGE);
//         return;
//     }

//     // Create a new Appointment Request
// AppointmentRequest appointmentRequest = new AppointmentRequest(
//     "Appointment Request", 
//     "Class Appointment", 
//     selectedRequest.getRequester(), 
//     selectedTeacher, 
//     "This is a class appointment between the teacher and student.", 
//     "Virtual/Physical location"
// );

// // Set additional details
// appointmentRequest.setStatus("Scheduled");
// appointmentRequest.setRequestDate(new Date());

//     // Update the original request's status
//     selectedRequest.setStatus("Scheduled");

//     JOptionPane.showMessageDialog(this, "Session successfully scheduled.", "Success", JOptionPane.INFORMATION_MESSAGE);
//     populateStudentRequestsTable(); // Refresh the table

//     }//GEN-LAST:event_ScheduleSessionBtnActionPerformed


private void ScheduleSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {
    int selectedRow = studentRequestTbl.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a request to schedule a session.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    WorkRequest selectedRequest = (WorkRequest) studentRequestTbl.getValueAt(selectedRow, 0);
    UserAccount selectedTeacher = (UserAccount) chooseTeacherCombobox.getSelectedItem();

    if (selectedTeacher == null) {
        JOptionPane.showMessageDialog(this, "Please select a teacher.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Create a new AppointmentRequest
    AppointmentRequest appointmentRequest = new AppointmentRequest(
        "Appointment Request", 
        "Class Appointment", 
        selectedRequest.getRequester(), 
        selectedTeacher, 
        "This is a class appointment between the teacher and student.", 
        "Virtual/Physical location"
    );

    // Add to both global and teacher-specific WorkQueue
    EcoSystem.getInstance().getWorkQueue().addWorkRequest(appointmentRequest);
    selectedTeacher.getWorkQueue().addWorkRequest(appointmentRequest);

    // Update the original request's status
    selectedRequest.setStatus("Scheduled");

    JOptionPane.showMessageDialog(this, "Session successfully scheduled.", "Success", JOptionPane.INFORMATION_MESSAGE);
    populateStudentRequestsTable(); // Refresh the table
}
















    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ScheduleSessionBtn;
    private javax.swing.JComboBox<String> chooseTeacherCombobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable studentRequestTbl;
    // End of variables declaration//GEN-END:variables
}
